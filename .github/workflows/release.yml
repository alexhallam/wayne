name: Release to PyPI

on:
  push:
    branches: [ main ]
    paths:
      - 'CHANGELOG.md'
      - 'pyproject.toml'
  workflow_dispatch:  # Allow manual triggering

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for changelog parsing
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Install dependencies
      run: |
        uv sync --dev
    
    - name: Extract version from CHANGELOG
      id: version
      run: |
        # Extract the latest version from CHANGELOG.md
        VERSION=$(grep -m 1 "^## \[" CHANGELOG.md | sed 's/## \[\(.*\)\].*/\1/')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
    
    - name: Update pyproject.toml version
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        # Update version in pyproject.toml using sed
        sed -i "s/^version = \".*\"/version = \"$VERSION\"/" pyproject.toml
        echo "Updated pyproject.toml to version $VERSION"
    
    - name: Build package
      run: |
        uv build
    
    - name: Check if version already exists on PyPI
      id: check_version
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        # Check if version already exists on PyPI
        if curl -s "https://pypi.org/pypi/wayne-trade/$VERSION/json" | grep -q '"version"'; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Version $VERSION already exists on PyPI"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Version $VERSION is new"
        fi
    
    - name: Publish to PyPI
      if: steps.check_version.outputs.exists == 'false'
      env:
        PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        # Set up authentication
        echo "__token__" > ~/.pypirc
        echo "[pypi]" >> ~/.pypirc
        echo "username = __token__" >> ~/.pypirc
        echo "password = $PYPI_API_TOKEN" >> ~/.pypirc
        
        # Publish using uv
        uv publish --token $PYPI_API_TOKEN
    
    - name: Create GitHub Release
      if: steps.check_version.outputs.exists == 'false'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        body: |
          ## Changes in v${{ steps.version.outputs.version }}
          
          ${{ steps.changelog.outputs.content }}
        draft: false
        prerelease: false
    
    - name: Extract changelog content
      id: changelog
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        # Extract changelog content for this version
        awk "/^## \[$VERSION\]/,/^## \[/" CHANGELOG.md | head -n -1 > changelog_content.txt
        echo "content<<EOF" >> $GITHUB_OUTPUT
        cat changelog_content.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
